#!/usr/bin/env python

"""
 This source file is part of the Swift.org open source project

 Copyright 2015 Apple Inc. and the Swift project authors
 Licensed under Apache License v2.0 with Runtime Library Exception

 See http://swift.org/LICENSE.txt for license information
 See http://swift.org/CONTRIBUTORS.txt for Swift project authors

 -------------------------------------------------------------------------
 This script is used to bootstrap the autobuild build.

 It does so by writing out a build task file which can be used to build a
 stage1 package manager. That package manager is then expected to be able
 to build itself to produce the production tools.

"""

import StringIO
import errno
import json
import os
import platform
import shlex
import subprocess
import sys
import tempfile

###

def note(message):
    print("%s: note: %s" % (os.path.basename(sys.argv[0]), message))
    sys.stdout.flush()

def error(message):
    print("%s: error: %s" % (os.path.basename(sys.argv[0]), message))
    sys.stdout.flush()
    raise SystemExit(1)

def mkdir_p(path):
    """
    mkdir_p(path)

    Create the given directory, if it does not exist.
    """

    try:
        os.makedirs(path)
    except OSError as e:
        # Ignore EEXIST, which may occur during a race condition.
        if e.errno != errno.EEXIST:
            raise

# FIXME: Consider eliminating this once the build task format supports node
# hashing.
def write_file_if_changed(path, data):
    """
    write_file_if_changed(path, data)

    Write the given data to the path, only updating the file if the contents are
    different than the current ones.
    """
    
    try:
        with open(path) as f:
            old_data = f.read()
    except:
        old_data = None
    if old_data == data:
        return

    with open(path, "w") as f:
        f.write(data)

###

g_num_cpus = os.sysconf("SC_NPROCESSORS_ONLN")
g_default_sysroot = None
if platform.system() == 'Darwin':
    g_platform_path = subprocess.check_output(
        ["xcrun", "--sdk", "macosx", "--show-sdk-platform-path"]).strip()
    g_default_sysroot = subprocess.check_output(
        ["xcrun", "--sdk", "macosx", "--show-sdk-path"]).strip()

g_bundle_identifier_base = "io.haskellswift.autobuild"
g_xctest_infoplist_template = """\
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDevelopmentRegion</key>
	<string>en</string>
	<key>CFBundleExecutable</key>
	<string>%(bundle_executable)s</string>
	<key>CFBundleIdentifier</key>
	<string>%(bundle_identifier)s</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>%(bundle_name)s</string>
	<key>CFBundlePackageType</key>
	<string>BNDL</string>
	<key>CFBundleShortVersionString</key>
	<string>1.0</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleSupportedPlatforms</key>
	<array>
		<string>MacOSX</string>
	</array>
	<key>CFBundleVersion</key>
	<string>1</string>
</dict>
</plist>
"""

class Target(object):
    @property
    def virtual_node(self):
        return "<target-%s>" % (self.name)
    
    @property
    def linked_virtual_node(self):
        return "<link-%s>" % (self.name)
    
    def __init__(self, name, dependencies=[], swiftflags=[], extra_libs=[],
                 subpath=None, is_test=False):
        self.name = name
        self.dependencies = list(dependencies)
        self.swiftflags = list(swiftflags)
        self.extra_libs = list(extra_libs)
        self.is_test = is_test

        # Discover the source files, and whether or not this is a library.
        self.is_library = True
        self.swift_sources = []
        for (dirpath, dirnames, filenames) in os.walk(
                os.path.join(g_source_root, subpath or self.name)):
            for name in filenames:
                path = os.path.join(dirpath, name)
                _,ext = os.path.splitext(name)
                if ext == '.swift':
                    if name == 'main.swift':
                        self.is_library = False
                    self.swift_sources.append(path)

            # Exclude tests and fixtures, for now.
            dirnames[:] = [
                name for name in dirnames
                if name != " " and not name.lower().startswith("fixtures")]
        self.swift_sources.sort()

    def write_swift_compile_commands(self, opts, target_build_dir,
                                     module_dir, output, objects,
                                     link_input_nodes, predecessor_node):
        # Compute the derived paths.
        module_path = os.path.join(module_dir, "%s.swiftmodule" % (self.name,))

        # Create the per-file entries.
        swift_objects = []
        for path in self.swift_sources:
            filename = os.path.basename(path)
            base_path = os.path.join(
                target_build_dir, os.path.splitext(filename)[0])
            object_path = base_path + ".o"
            swift_objects.append(object_path)
            objects.append(object_path)

        # Form the command to build all the swift files.
        #
        # FIXME: The -j doesn't belong here, and should move into the
        # 'swift' tool.
        module_name = self.name.replace("-", "_")
        other_args = ['-Onone', '-j%d' % g_num_cpus] + self.swiftflags
        other_args.append("-enable-testing")
        if platform.system() == 'Darwin':
            other_args.extend(["-target", "x86_64-apple-macosx10.10"])
        # Add the XCTest options, if needed.
        if self.is_test:
            # On Darwin, the XCTest library doesn't ship as part of the SDK
            # *or* part of the Swift package, so we need to pass search
            # paths to the Platform library location.
            if platform.system() == 'Darwin':
                other_args.extend([
                    "-F", os.path.join(
                        g_platform_path,
                        "Developer", "Library", "Frameworks")])
                
            # If we are have an explicit path to the XCTest build products
            # (used when co-building with Swift), then add that path.
            if opts.xctest_path:
                other_args.extend(["-I", opts.xctest_path])
        if opts.sysroot:
            other_args.extend(["-sdk", opts.sysroot])
        compile_swift_node = '<compile-swift-%s>' % (self.name,)
        link_input_nodes.append(compile_swift_node)

        print >>output, "  %s:" % json.dumps(compile_swift_node)
        print >>output, "    tool: swift-compiler"
        print >>output, "    executable: %s" % json.dumps(opts.swiftc_path)
        # FIXME: We shouldn't even need to specify the sources here once we have
        # discovered dependencies support.
        print >>output, "    inputs: %s" % json.dumps(
            [predecessor_node] + self.swift_sources)
        print >>output, "    outputs: %s" % json.dumps(
            [compile_swift_node, module_path] + swift_objects)
        print >>output, "    module-name: %s" % json.dumps(module_name)
        print >>output, "    module-output-path: %s" % json.dumps(module_path)
        print >>output, "    is-library: %s" % json.dumps(
            str(bool(self.is_library)).lower())
        print >>output, "    sources: %s" % json.dumps(
            ' '.join(self.swift_sources))
        print >>output, "    objects: %s" % json.dumps(' '.join(swift_objects))
        print >>output, "    import-paths: %s" % json.dumps(
            ' '.join([module_dir]))
        print >>output, "    other-args: %s" % json.dumps(' '.join(other_args))
        print >>output, "    temps-path: %s" % json.dumps(target_build_dir)
        print >>output

# Hard-coded target definition.
g_project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
g_source_root = os.path.join(g_project_root, "Sources")
targets = [
    Target('PackageDescription'),
    Target('libc'),
    Target('POSIX', dependencies=["libc"]),
    Target('sys', dependencies=["POSIX", "libc"]),
    Target('dep', dependencies=["sys", "PackageDescription"]),
    # Target('swift-build', dependencies=["dep", "sys", "PackageDescription",
                                        # "POSIX", "libc"]),

    # Test targets.
    # Target('PackageDescription-tests', subpath="../Tests/PackageDescription",
           # dependencies=["dep", "sys", "PackageDescription", "POSIX", "libc"],
           # is_test=True),
    # Target('sys-tests', subpath="../Tests/sys",
            # dependencies=["sys", "POSIX", "libc"],
            # is_test=True),
    Target('dep-tests', subpath="../Tests/dep",
            dependencies=["dep"],
            is_test=True)
]
target_map = dict((t.name,t) for t in targets)

def create_bootstrap_files(sandbox_path, opts):
    # Write out the build file.
    output = StringIO.StringIO()

    # Write out the task file header.
    print >>output, "client:"
    print >>output, "  name: swift-build"
    print >>output

    # Write out the tools section.
    #
    # FIXME: Not yet defined.
    print >>output, "tools: {}"
    print >>output

    # Compute the list of active targets.
    active_targets = [target for target in targets
                      if not target.is_test or opts.build_tests]
    
    # Write out the targets list.
    #
    # We support 'all' (build all targets) and an individual name for each
    # target.
    #
    # FIXME: Need support for default target.
    print >>output, "targets:"
    print >>output, "  \"\": %s" % (json.dumps(
        [target.virtual_node for target in active_targets]),)
    print >>output, "  all: %s" % (json.dumps(
        [target.virtual_node for target in active_targets]),)
    for target in active_targets:
        print >>output, "  %s: %s" % (
            target.name, json.dumps([target.virtual_node]))
    print >>output

    # Create the shared lib dir.
    lib_dir = os.path.join(sandbox_path, "lib")
    mkdir_p(lib_dir)

    # Create the shared bin dir.
    bin_dir = os.path.join(sandbox_path, "bin")
    mkdir_p(bin_dir)

    # Create the shared module dir.
    module_dir = os.path.join(sandbox_path, "modules")
    mkdir_p(module_dir)

    # Create the shared test products dir.
    tests_dir = os.path.join(sandbox_path, "Tests")
    mkdir_p(tests_dir)

    print >>output, "commands:"
    for target in targets:
        if target.is_test and not opts.build_tests:
            # Skip tests if XCTest path is not provided
            continue
        
        print >>output, "  # Target Commands: %r" % (target.name,)
        target_build_dir = os.path.join(sandbox_path, target.name + ".build")
        mkdir_p(target_build_dir)

        predecessor_node = "<entry-%s>" % (target.name,)
        objects = []
        link_input_nodes = [predecessor_node]

        # Write out the predecessor node used to order w.r.t. other targets.
        print >>output, "  %s:" % json.dumps(predecessor_node)
        print >>output, "    tool: phony"
        print >>output, "    inputs: %s" % json.dumps(
            [target_map[name].virtual_node for name in target.dependencies])
        print >>output, "    outputs: %s" % json.dumps([predecessor_node])
        print >>output

        # Write out the target build commands (we just name the command and node
        # the same).

        # Write the Swift compile commands, if used.
        if target.swift_sources:
            target.write_swift_compile_commands(
                opts, target_build_dir, module_dir, output, objects,
                link_input_nodes, predecessor_node)

        # Form the command line to link.
        linked_libraries = []
        if target.is_library:
            link_output_path = os.path.join(lib_dir, "%s.a" % (target.name,))
            link_command = ['rm', '-f', link_output_path, ';',
                            'ar', 'cr', link_output_path]
            link_command.extend(objects)
        else:
            if target.is_test and platform.system() == "Darwin":
                # On OS X, we build the test targets as actual bundles.
                xctest_bundle_path = os.path.join(
                    bin_dir, target.name + ".xctest")
                contents_path = os.path.join(xctest_bundle_path, "Contents")
                link_output_path = os.path.join(
                    contents_path, "MacOS", target.name)
                mkdir_p(os.path.dirname(link_output_path))
                infoplist_path = os.path.join(contents_path, "Info.plist")
                write_file_if_changed(
                    infoplist_path, g_xctest_infoplist_template % {
                        "bundle_executable" : target.name,
                        "bundle_identifier" : "%s.%s" % (
                            g_bundle_identifier_base, target.name),
                        "bundle_name" : target.name
                })
            else:
                link_output_path = os.path.join(bin_dir, target.name)
                
            link_command = [opts.swiftc_path, '-o', link_output_path]
            if opts.sysroot:
                link_command.extend(["-sdk", opts.sysroot])
            if platform.system() == 'Darwin':
                link_command.extend(["-target", "x86_64-apple-macosx10.10"])
            link_command.extend(objects)
            for dependency in target.dependencies:
                dependency_lib_path = os.path.join(lib_dir, "%s.a" % dependency)
                link_command.append(dependency_lib_path)
                linked_libraries.append(dependency_lib_path)
            if platform.system() == 'Darwin':
                link_command.extend(["-Xlinker", "-all_load"])
            for lib in target.extra_libs:
                link_command.extend(["-Xlinker", "-l%s" % (lib,)])
            # Add the XCTest options, if needed.
            if target.is_test:
                # On Darwin, the XCTest library doesn't ship as part of the SDK
                # *or* part of the Swift package, so we need to pass search
                # paths to the Platform library location.
                if platform.system() == 'Darwin':
                    link_command.extend(["-Xlinker", "-bundle"])
                    link_command.extend([
                        "-F", os.path.join(
                            g_platform_path,
                            "Developer", "Library", "Frameworks")])

                    # We also embed an RPATH, so the tests can be run directly.
                    link_command.extend([
                        "-Xlinker", "-rpath",
                        "-Xlinker", os.path.join(
                            g_platform_path,
                            "Developer", "Library", "Frameworks")])
                
                # If we are have an explicit path to the XCTest build products
                # (used when co-building with Swift), then add that path.
                if opts.xctest_path:
                    # Tell the linker where to look for XCTest, but autolinking
                    # knows to pass -lXCTest.
                    link_command.extend(["-L", opts.xctest_path])
                    # Add an RPATH, so that the tests can be run directly.
                    link_command.extend(
                        ["-Xlinker", "-rpath", "-Xlinker", opts.xctest_path])
        #note(link_command)
        # Write out the link command.
        print >>output, "  %s:" % json.dumps(target.linked_virtual_node)
        print >>output, "    tool: shell"
        print >>output, "    description: Link %s" % (target.name,)
        print >>output, "    inputs: %s" % json.dumps(
            link_input_nodes + objects + linked_libraries)
        print >>output, "    outputs: %s" % json.dumps(
            [target.linked_virtual_node, link_output_path])
        print >>output, "    args: %s" % ' '.join(link_command)
        print >>output

        # Write the top-level target group command.
        print >>output, "  %s:" % json.dumps(target.virtual_node)
        print >>output, "    tool: phony"
        print >>output, "    inputs: %s" % json.dumps(
            [target.linked_virtual_node])
        print >>output, "    outputs: %s" % json.dumps([target.virtual_node])
        print >>output
    
    # Write the output file.
    write_file_if_changed(os.path.join(sandbox_path, "build.swift-build"),
                          output.getvalue())

def process_runtime_libraries(build_path, opts, bootstrap=False):
    if bootstrap:
        module_input_path = os.path.join(
            build_path, "modules", "PackageDescription.swiftmodule")
        input_lib_path = os.path.join(
            build_path, "lib", "PackageDescription.a")
    else:
        module_input_path = os.path.join(
            build_path, "debug", "PackageDescription.swiftmodule")
        input_lib_path = os.path.join(
            build_path, "debug", "PackageDescription.a")
        
    lib_path = os.path.join(build_path, "lib", "swift", "pm")
    mkdir_p(lib_path)
    runtime_module_path = os.path.join(
        lib_path, "PackageDescription.swiftmodule")
    cmd = ["cp", module_input_path, runtime_module_path]
    subprocess.check_call(cmd)
    if platform.system() == 'Darwin':
        runtime_lib_path = os.path.join(lib_path, "libPackageDescription.dylib")
        cmd = [opts.swiftc_path, "-Xlinker", "-dylib", "-o",
               runtime_lib_path,
               "-Xlinker", "-all_load",
               input_lib_path,
               "-target", "x86_64-apple-macosx10.10"]
    else:
        # Derive the command line to use by querying to swiftc
        # driver. Unfortunately we cannot use it directly due to the inability
        # to use an -X... style arg to pass arguments to the Clang driver, which
        # it calls before calling the linker.

        # This is the command we would like to use.
        #
        # We include an RPATH entry so that the Swift libraries can be found
        # relative to where it will be installed (in 'lib/swift/pm/...').
        runtime_lib_path = os.path.join(lib_path, "libPackageDescription.so")
        cmd = [opts.swiftc_path, "-Xlinker", "-shared", "-o", runtime_lib_path,
               "-Xlinker", "--whole-archive",
               "-Xlinker", input_lib_path,
               "-Xlinker", "--no-whole-archive", "-lswiftGlibc",
               "-Xlinker", "-rpath=$ORIGIN/../linux"]
        
        # We need to pass one swift file here to bypass the "no input files"
        # error.
        tf = tempfile.NamedTemporaryFile(suffix=".swift")
        cmds = subprocess.check_output(
            cmd + [tf.name, "-###"]).strip().split("\n")

        # Get the link command 'swiftc' used.
        link_cmd = shlex.split(cmds[-1])

        # Unqoute any quoted characters.
        link_cmd = [arg.replace("\\", "") for arg in link_cmd]

        # Drop any .o files, and the -Xlinker which preceeds '-shared'.
        try:
            idx = link_cmd.index("-shared")
        except:
            idx = -1
        if idx == -1 or link_cmd[idx - 1] != "-Xlinker":
            raise SystemExit("unable to understand 'swiftc' driver commands")
        del link_cmd[idx - 1]
        cmd = [arg for arg in link_cmd
               if not arg.endswith(".o") and not arg.endswith(".autolink")]
    subprocess.check_call(cmd)
    #note(cmd)
    return (runtime_module_path, runtime_lib_path)

def get_swift_build_tool_path():
    # Search for a 'swift-build-tool' to use.

    # First, look in $(BUILT_PRODUCTS_DIR) in case we are being built from Xcode
    # along with the llbuild project.
    built_products_dir = os.environ.get("BUILT_PRODUCTS_DIR")
    if built_products_dir:
        sbt_path = os.path.join(built_products_dir, "swift-build-tool")
        if os.path.exists(sbt_path):
            return sbt_path

    # Next, search for it in PATH.
    try:
        return subprocess.check_output(["which", "swift-build-tool"]).strip()
    except:
        pass

    # If that failed, on Darwin use xcrun to search for the tool.
    if platform.system() == 'Darwin':
        try:
            sbt_path = subprocess.check_output(
                ["xcrun", "--find", "swift-build-tool"],
                stderr=subprocess.PIPE).strip()
            if os.path.exists(sbt_path):
                return sbt_path
        except subprocess.CalledProcessError:
            pass

    # If all else failed, report an error.
    error("unable to find 'swift-build-tool' tool for bootstrap build")

def get_swift_build_path():
    # Search for a 'swift-build' to use.

    # First, look in $(BUILT_PRODUCTS_DIR) in case we are being built from Xcode
    # along with the llbuild project.
    built_products_dir = os.environ.get("BUILT_PRODUCTS_DIR")
    if built_products_dir:
        sb_path = os.path.join(built_products_dir, "swift-build")
        if os.path.exists(sb_path):
            return sb_path

    # Next, search for it in PATH.
    try:
        return subprocess.check_output(["which", "swift-build"]).strip()
    except:
        pass

    # If that failed, on Darwin use xcrun to search for the tool.
    if platform.system() == 'Darwin':
        try:
            sb_path = subprocess.check_output(
                ["xcrun", "--find", "swift-build"],
                stderr=subprocess.PIPE).strip()
            if os.path.exists(sb_path):
                return sb_path
        except subprocess.CalledProcessError:
            pass

    # If all else failed, report an error.
    error("unable to find 'swift-build-tool' tool for bootstrap build")

def main():
    from optparse import OptionParser, OptionGroup
    parser = OptionParser("""\
usage: %prog [options] [clean|all|test|install]

This script will build a bootstrapped copy of the Swift Package Manager, and
optionally perform extra actions like installing the result (with 'install') to
a location ('--prefix').

The script is also capable of building the package manager tests as part of the
Stage 1 build, and running those tests (with 'test'). This is a stop gap measure
for enabling integrated testing until the package manager itself has built in
testing support.""")
    parser.add_option("", "--swiftc", dest="swiftc_path",
                      help="path to the swift compiler [%default]",
                      default=os.getenv("SWIFTC") or "swiftc", metavar="PATH")
    parser.add_option("", "--sbt", dest="sbt_path",
                      help="path to the 'swift-build-tool' tool [%default]",
                      metavar="PATH")
    parser.add_option("", "--sysroot", dest="sysroot",
                      help="compiler sysroot to pass to Swift [%default]",
                      default=g_default_sysroot, metavar="PATH")
    parser.add_option("", "--build", dest="build_path",
                      help="create build products at PATH [%default]",
                      default=".build", metavar="PATH")
    parser.add_option("", "--prefix", dest="install_prefix",
                      help="use PATH as the prefix for installing [%default]",
                      default="/usr/local", metavar="PATH")
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true",
                      help="use verbose output")
    parser.add_option("--xctest", dest="xctest_path", action="store",
                      help="Path to XCTest build directory")
    parser.add_option("", "--build-tests", dest="build_tests",
                      action="store_true", help="enable building tests")
    opts,args = parser.parse_args()

    # When invoked via Xcode, it will automatically be passed a "build action".
    if len(args) == 0:
        build_actions = set(["all"])
    else:
        build_actions = set(args)

    # Validate the build actions.
    for action in build_actions:
        if action not in ("clean", "all", "test", "install"):
            raise SystemExit("unknown build action: %r" % (action,))

    # Compute the build paths.
    build_path = os.path.join(g_project_root, opts.build_path)
    sandbox_path = os.path.join(build_path, ".bootstrap")
    
    # If the action is "clean", just remove the bootstrap and build directories.
    if "clean" in build_actions:
        cmd = ["rm", "-rf", sandbox_path]
        note("cleaning stage1: %s" % (' '.join(cmd),))
        result = subprocess.call(cmd)
        if result != 0:
            error("build failed with exit status %d" % (result,))
            
        cmd = ["rm", "-rf", build_path]
        note("cleaning self-hosted: %s" % (' '.join(cmd),))
        result = subprocess.call(cmd)
        if result != 0:
            error("build failed with exit status %d" % (result,))
        raise SystemExit(0)

    # All other actions build.
   
    # Create the sandbox.
    note(sandbox_path)
    mkdir_p(sandbox_path)

    # Determine the swift-build-tool to use.
    opts.sbt_path = os.path.abspath(
        opts.sbt_path or get_swift_build_tool_path())
    if opts.xctest_path:
        opts.xctest_path = os.path.abspath(opts.xctest_path)

    # Create or update the bootstrap files.
    create_bootstrap_files(sandbox_path, opts)
    
    # Run the stage1 build.
    cmd = [opts.sbt_path, "-f", os.path.join(sandbox_path, "build.swift-build")]
    if opts.verbose:
        cmd.append("-v")
    note("building stage1: %s" % ' '.join(cmd))
    result = subprocess.call(cmd)
    if result != 0:
        error("build failed with exit status %d" % (result,))

    # Stage the stage1 runtime library.
    #
    # FIXME: Integrate this into the bootstrap build.
    runtime_module_path,runtime_lib_path = process_runtime_libraries(
        sandbox_path, opts, bootstrap=True)

    # Build the package manager with itself.
    env_cmd = ["env",
               "SWIFTC=" + opts.swiftc_path,
               "SWIFT_BUILD_TOOL=" + opts.sbt_path,
               "SWIFT_BUILD_PATH=" + build_path]
    if opts.sysroot:
        env_cmd.append("SYSROOT=" + opts.sysroot)
    # On Linux, we need to embed an RPATH so swift-{build,get} can find the core
    # libraries.
    if platform.system() == 'Linux':
        env_cmd.append("SWIFTPM_EMBED_RPATH=$ORIGIN/../lib/swift/linux")
    else:
        env_cmd.append("SWIFTPM_EMBED_RPATH=@executable_path/../lib/swift/macosx")
    sb_path = get_swift_build_path()
    cmd = env_cmd + [sb_path]   #[os.path.join(sandbox_path, "bin", "swift-build")]
    note("building self-hosted 'swift-build': %s" % (
        ' '.join(cmd),))
    result = subprocess.call(cmd, cwd=g_project_root)
    if result != 0:
        error("build failed with exit status %d" % (result,))

    swift_build_path = os.path.join(build_path, "debug", "swift-build")
    note("built: %s" % (swift_build_path,))

    # Stage the runtime library in the expected resources location.
    #
    # FIXME: It would be nice to get this to only be done incrementally.
    runtime_module_path,runtime_lib_path = process_runtime_libraries(
        build_path, opts)
    note("built runtime module : %s" % (runtime_module_path,))
    note("built runtime library: %s" % (runtime_lib_path,))

    # If testing, run each of the test bundles.
    if "test" in build_actions:
        if not opts.build_tests:
            parser.error("cannot use 'test' action without '--build-tests'")

        # Construct the test environment.
        env_cmd = ["env",
                   "SWIFTC=" + opts.swiftc_path,
                   "SWIFT_BUILD_TOOL=" + opts.sbt_path,
                   "SPM_INSTALL_PATH=" + sandbox_path]
        for target in targets:
            if not target.is_test:
                continue

            note("running test target '%s'..." % (target.name,))
            if platform.system() == 'Linux':
                cmd = env_cmd + [os.path.join(sandbox_path, "bin", target.name)]
            else:
                cmd = env_cmd + ["xcrun", "xctest", os.path.join(
                    sandbox_path, "bin", target.name + ".xctest")]
            note("executing: %s" % (' '.join(cmd),))
            result = subprocess.call(cmd, cwd=g_project_root)
            if result != 0:
                error("tests failed with exit status %d" % (result,))
    
    # If installing, put the build products in the appropriate location.
    if "install" in build_actions:
        bin_install_path = os.path.join(g_project_root, opts.install_prefix,
                                        "bin")
        lib_install_path = os.path.join(g_project_root, opts.install_prefix,
                                        "lib", "swift", "pm")
        mkdir_p(bin_install_path)
        mkdir_p(lib_install_path)
        for product_path in [swift_build_path]:
            cmd = ["install", product_path, bin_install_path]
            note("installing %s: %s" % (
                os.path.basename(product_path), ' '.join(cmd)))
            result = subprocess.call(cmd)
            if result != 0:
                error("install failed with exit status %d" % (result,))
        for (resource_path,is_lib) in [(runtime_module_path, False),
                                       (runtime_lib_path, True)]:
            cmd = ["install"]
            if not is_lib:
                cmd.extend(["-m", "0644"])
            cmd.extend([resource_path, lib_install_path])
            note("installing %s: %s" % (
                os.path.basename(resource_path), ' '.join(cmd)))
            result = subprocess.call(cmd)
            if result != 0:
                error("install failed with exit status %d" % (result,))
        
if __name__ == '__main__':
    main()
